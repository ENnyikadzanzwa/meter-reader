name: Android Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Expo CLI and dependencies
      run: |
        npm install -g expo-cli
        npm ci
        npm install -g sharp-cli
    
    - name: Prepare Gradle Wrapper
      run: |
        cd android
        chmod +x ./gradlew
        ./gradlew wrapper --gradle-version 8.5
    
    - name: Diagnose Environment
      run: |
        echo "Java Version:"
        java -version
        echo "\nNode.js Version:"
        node --version
        echo "\nNPM Version:"
        npm --version
        echo "\nExpo CLI Version:"
        expo --version
        echo "\nGradle Version:"
        ./gradlew --version
    
    - name: Prebuild Expo Android Project
      run: |
        npx expo prebuild --platform android
        
    - name: Optimize Assets
      run: |
        # Optimize images and remove unnecessary files
        find . -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" \) \
          -exec sharp resize 1024 {} {}.optimized \;
        find . -type f -name "*.optimized" -exec mv {} {} \;
        
    - name: List Android Project Structure
      run: |
        cd android
        find . -type f \( -name "*.gradle" -o -name "*.properties" \)
        echo "\nProject Files:"
        ls -R
        
    - name: Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v2
    
    - name: Build Android APK
      run: |
        cd android
        ./gradlew assembleRelease \
          -Pandroid.useAndroidX=true \
          -Pandroid.enableJetifier=true \
          -Porg.gradle.caching=true \
          -Porg.gradle.parallel=true \
          -Porg.gradle.configureondemand=true \
          --stacktrace \
          --info \
          --scan
      env:
        JAVA_HOME: ${{ steps.setup-java.outputs.path }}
    
    - name: Compress APK
      run: |
        cd android/app/build/outputs/apk/release
        for apk in *.apk; do
          echo "Compressing $apk..."
          advzip -z -4 "$apk"
        done
    
    - name: Sign APK
      run: |
        cd android
        # Generate a temporary keystore for signing
        keytool -genkey -v -keystore app/release.keystore \
          -alias releasekey \
          -keyalg RSA -keysize 2048 \
          -validity 10000 \
          -storepass temppassword \
          -keypass temppassword \
          -dname "CN=MeterReader, OU=Development, O=YourOrg, L=YourCity, S=YourState, C=YourCountry"
        
        # Sign the APK
        ./gradlew signingReport
    
    - name: Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: meter-reader-release
        path: |
          android/app/build/outputs/apk/release/*.apk
          android/app/build/outputs/mapping/release/mapping.txt
        retention-days: 5
    
    - name: Upload Build Diagnostics
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-diagnostics
        path: |
          android/app/build/outputs/
          android/build/
          android/app/build/reports/
          android/app/build/tmp/
        retention-days: 5
